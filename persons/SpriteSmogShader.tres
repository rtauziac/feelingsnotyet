[gd_resource type="VisualShader" load_steps=16 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=16]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=17]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "smogFactor"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=6]
output_port_for_preview = 0
texture = SubResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=8]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=9]

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=13]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;
uniform float smogFactor;



void vertex() {
// Output:0

}

void fragment() {
// Input:13
	vec3 n_out13p0 = vec3(UV, 0.0);

// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// Input:6
	float n_out6p0 = TIME;

// ScalarOp:7
	float n_in7p1 = 0.20000;
	float n_out7p0 = n_out6p0 * n_in7p1;

// VectorOp:9
	vec3 n_out9p0 = n_out8p0 + vec3(n_out7p0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out9p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarUniform:16
	float n_out16p0 = smogFactor;

// VectorOp:10
	vec3 n_out10p0 = n_out2p0 * vec3(n_out16p0);

// VectorOp:5
	vec3 n_out5p0 = n_out13p0 + n_out10p0;

// ScalarOp:15
	float n_in15p1 = 2.00000;
	float n_out15p0 = n_out16p0 / n_in15p1;

// VectorOp:14
	vec3 n_out14p0 = n_out5p0 - vec3(n_out15p0);

// Input:3

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out14p0.xy);
		n_out4p0 = TEXTURE_tex_read.rgb;
		n_out4p1 = TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1501, -123.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 473, 211 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -807, -34 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -195, 370 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 190, 277 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( -191, 71 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( -1386, 225 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( -1193, 216 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( -1182, 118 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -1001, 125 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -384, 129 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -378, 23 )
nodes/fragment/14/node = SubResource( 16 )
nodes/fragment/14/position = Vector2( -19, 167 )
nodes/fragment/15/node = SubResource( 17 )
nodes/fragment/15/position = Vector2( -236, 240 )
nodes/fragment/16/node = SubResource( 18 )
nodes/fragment/16/position = Vector2( -651, 384 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 2, 4, 0, 0, 0, 4, 1, 0, 1, 6, 0, 7, 0, 2, 0, 10, 0, 10, 0, 5, 1, 13, 0, 5, 0, 8, 0, 9, 0, 7, 0, 9, 1, 9, 0, 2, 0, 5, 0, 14, 0, 14, 0, 4, 0, 15, 0, 14, 1, 16, 0, 10, 1, 16, 0, 15, 0 )
